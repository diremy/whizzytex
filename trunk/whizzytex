#!/bin/sh
#
#  WhizzyTeX - a wysiwyg environment for TeX
#  Copyright (C) 2002 Didier Rémy
#  
#  This library is free software; you can redistribute it and/or
#  modify it under the terms of the GNU Lesser General Public
#  License as published by the Free Software Foundation; either
#  version 2 of the License, or (at your option) any later version.
#  
#  This library is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#   
#  See the GNU Lesser General Public License version 2.1 for more
#  details (enclosed in the file LGPL).
#############################################################################
#  File whizzytex
#############################################################################

### Configuration

# time in milliseconds to sleep when the pool is empty.
typeset -i WHIZZYPAUSE=100

# limit the length of error messages sent back to stdout.
TEXERRORMAXLINES=50
TEXERRORAROUND=20

# time limit for running initex in case this could loop, undetectedly!
LIMIT=20


# whether WhizzyTeX should send itself a STOP signal (then it must be waken up)
# or just sleep for a while when done and no slicing is available

STOP=true

# name (or full path) of the dump package file (without the extension)

DUMP=whizzytex

# Signals telling gv and xdvi to refresh

SIGDVI=SIGUSR1
SIGPS=SIGHUP

### End of manual configuration

case $# in
 0) echo 'Need a file name'; exit 1;;
esac

COMMAND="$0 $*"
TOUCH=false
MAKE=defaultmake

FMT='&latex'
DO=loop
DOMARKS=false
VIEW=ps
VIEWCOMMAND=gv
WATCHFILES=
DUPLEX=false
DEBUG=false
ADVI=false
while true
do
  case $1 in
   -kill) DO=kill; shift;;
   -wakeup) DO=wakeup; shift;;
   -format) DO=format; shift;;
   -pre) MAKE="$2"; shift 2;;
   -duplex) DUPLEX="true"; shift;;
   -marks) DOMARKS=true; shift;;
   -fmt) FMT='&'"$2"; shift 2;;
   -nostop) STOP=false; shift;;
   -marksonly) DO=marks; shift;;
   -watch) WATCHFILES="$*"; shift $#;;
   -debug) DEBUG=true; shift;;
  -dvi)
       VIEW=dvi;
       case $2 in
       .) VIEWCOMMAND=dview;;
       *) VIEWCOMMAND=$2;;
       esac
       shift 2;;
   -advi)
       ADVI=true
       VIEW=dvi;
       case $2 in
       .) VIEWCOMMAND=dview;;
       *) VIEWCOMMAND=$2;;
       esac
       shift 2;;
   -ps)
       case $2 in
       .) VIEWCOMMAND=gv;;
       *) VIEWCOMMAND=$2;;
       esac
       shift 2;;
   -*)
       echo 'Unrecognized argument '"$1"'

Usage whizzytex: 

  whizzytex <option> ... <option> <file>

where <option> is 

    -kill 
    -format 
    -marks 
    -pre <preproces-command>
    -dvi <view-command> 
    -ps <view-command> 

  ' 1>&2
       exit 1;;
   *) break;;
  esac
done

HERE=$(pwd)

NAME=$(basename $1 .tex)
FORMAT=\&$NAME
WHIZZY=_whizzy_$NAME
SLICE=$WHIZZY.new
LOG=$WHIZZY.gol
ERR=$WHIZZY.err

errlog () { echo "$*" 1>&2; }
log () { 
  if [ -f $LOG ] 
  then
    grep -B 3 -A $TEXERRORAROUND -e '^!' $LOG | head -$TEXERRORMAXLINES;
#    grep -B 3 -A $TEXERRORAROUND -e '^!' $LOG | head -$TEXERRORMAXLINES $LOG;
  fi
  false; 
}
errlog "$COMMAND"

LOCK=.$WHIZZY.tex

if [ -f $NAME.tex ]
then 
   :
else
   echo "File $NAME.tex does not exist"
   exit 1
fi

cleaning () {
   [ -f $WHIZZY.id ] && kill -QUIT $(cat  $WHIZZY.id)
   rm -f $WHIZZY.* $NAME.fmt 
   rm -rf $WHIZZY
   rm -f $LOCK
   errlog "Cleaning WHIZZY=$WHIZZY, LOCK=$LOCK"
}
# trap cleaning EXIT

suicide () {
   [ -f $WHIZZY.id ] && kill -QUIT $(cat  $WHIZZY.id) 
   rm -f $WHIZZY.* $NAME.fmt 
   rm -rf $WHIZZY
   if [ -f $LOCK ]
   then
     PID=$(cat $LOCK)
     rm -f $LOCK
     kill $JOBS 
     kill -KILL $PID
   fi
   errlog "Killing WHIZZY=$WHIZZY, LOCK=$LOCK"
   exit 2
}

# To fix: does not work

trap clean 3

wakeup () {
  [ -f $LOCK ] && kill -CONT $(cat $LOCK)
}

runinitex () {
  ( ulimit -t $LIMIT; initex "$@" )
}
runtex () {
  ( ulimit -t $LIMIT; latex "$@" )
}

# Making format

format () {
 ( runinitex $FMT '\nonstopmode\let\Documentclass\documentclass\renewcommand{\documentclass}[2][]{\Documentclass[#1]{#2}\usepackage{'"$DUMP"'}\WhizzyAdvi'"$ADVI"'}\input{'"$NAME.tex"'}' )
}

SECTION='\\\(chapter\|section\|subsection\|subsubsection\)'
intersect () {
    sort $WHIZZY.sec $WHIZZY.pag > $WHIZZY.spg
    sort -n -t : +0 +1 -u $WHIZZY.pag $WHIZZY.sec | sort | comm -1 -3 - $WHIZZY.spg > $WHIZZY.sec.1
    sort -n -t : +0 +1 -u $WHIZZY.sec $WHIZZY.pag | sort | comm -1 -3 - $WHIZZY.spg > $WHIZZY.pag.1
}

premark () {
    if [ -f $WHIZZY.pag ]
    then 
       SOURCES=$(sed -n -e 's/^\([^:]*\):\(.*\)$/\1/p' $WHIZZY.pag | sort -u); 
    else
       SOURCES=$NAME.tex
    fi
    grep -n -e "^$SECTION" $SOURCES /dev/null | \
    sed -e 's/^\([^:]*\):\([0-9]*\):'"$SECTION"'/\1:\2:\3@/' -e 's/"/\\"/' \
      > $WHIZZY.sec
}
postmark () {
    intersect
    ( join -t @  $WHIZZY.pag.1 $WHIZZY.sec.1 | \
      sed -e 's/^\([^:]*\):[0-9]*:\([^@]*\)@\([^@]*\)@\(.*\)$/\1:("\\\2\4"."\\WhizzyTeX\3")/' -e 's/\\/\\\\/g' ) > $WHIZZY.tmp
    ( echo "(setq whizzytex-marks '("; 
      for file in $SOURCES
      do
        if [ -f $file ]
        then
          echo '("'$file'".('
          ( grep -e "$file" $WHIZZY.tmp | sed -e 's/^\([^:]*:\)\(.*\)/\2/' ) 
          echo '))'
        fi
      done
      echo '))'
    ) > $WHIZZY.tmp.1
    mv $WHIZZY.tmp.1 $WHIZZY.pos
}
marks () {
    premark
    runtex $FORMAT '\WhizzytexInput{'"$NAME"'}' > /dev/null
    postmark
    cat $WHIZZY.pos
}

batchmarks () {
    premark
    if runtex $FORMAT '\WhizzytexInput{'"$NAME"'}' 
    then
      cp $NAME.dvi $NAME.dview
      if $1
      then
         postmark
      fi
      if [ -f $NAME.toc ]; then cp $NAME.toc $WHIZZY.toc; fi
      if grep 'LaTeX Warning: Citation' $NAME.log
      then
         bibtex $NAME; 
         if [ -f $NAME.bbl ]; then cp $NAME.bbl $WHIZZY.bbl; fi
         true
      fi
    else 
       rm -f $WHIZZY.pag; false
    fi
    
}


############################################################################
# wdiff

wordify () { 
    tr '\n' '' | 
    sed -e 's/[ ][ ]*//g' | \
    tr '' '\n' 
}

wdiff () { 
  FST=$1
  SND=$2
  DIF=$WHIZZY.dif
  diff $FST $SND > $DIF
  if [ $(grep -v -e '^[-><]' $DIF | wc -l) -eq 1 ] && \
     [ $(wc -l < $DIF) -lt 3 ] && \
       grep -e '^[1-9][0-9,]*[ac]' $DIF > $DIF.lin
  then
    sed $DIF -n -e '/^< /s/^< //p' > $FST.lin
    sed $DIF -n -e '/^> /s/^> //p' > $SND.lin

    wordify < $FST.lin > $FST.wrd
    wordify < $SND.lin > $SND.wrd

    diff $FST.wrd $SND.wrd > $DIF.wrd

    if [ $(grep -v -e '^[-><]' $DIF.wrd | wc -l) -eq 1 ] && \
         grep -e '^[1-9][0-9,]*[ac]' $DIF.wrd > /dev/null
    then
       (
        echo '<Error in Line'
        cat $DIF.lin
        echo Word
        grep -e '^[0-9]' $DIF.wrd
        echo ':'
        sed $DIF.wrd -n -e 's/^> \(.*\)$/\1/p'; 
        echo '>'
       ) | tr '\n' ' '
       echo     
    else
      false
    fi
  else 
    false
  fi
}

############################################################################


case $DO in
  kill) suicide && exit 0 || exit 1;;
  wakeup) wakeup && exit 0 || exit 1;;
  format) format && exit 0 || exit 1;;
  marks) marks && exit 0 || exit 1;;
  loop) 
      # To ensure that only one deamon is running on the spool file.
      if [ -f $LOCK ] && kill -CONT $(cat $LOCK) 2>/dev/null 
      then
        echo 'Remove running process first'
        exit 1
      else
        echo $$ > $LOCK
      fi
   ;;
esac

if [ -f $NAME.fmt -a $NAME.tex -ot $NAME.fmt ]
then 
  :
else
  echo -n '<Initial formating '
  if format >$LOG 2>$ERR && [ -f $NAME.fmt ]
  then
     echo 'succeeded>'
  else
     echo 'failed>'
     echo '<*** Fatal error: could not build initial format ***>'
     [ -f $ERR ] && cat $ERR
     log
     echo '<Exiting>'
     suicide
  fi
fi

# Initial file

echo '\begin{document}[Initial empty page]\end{document}' > $WHIZZY.nil

# Texing...

echo $VIEWCOMMAND 1>&2

ANTIDATE=$(date +%m%d%H%M.%S)
case $VIEW in
  ps)
    preview () {
        dvips -o $WHIZZY._ps $WHIZZY.dvi 2>/dev/null && \
        { if [ $WHIZZY._ps -nt $WHIZZY.ps ]; then true; \
             else touch -t $ANTIDATE $WHIZZY._ps; fi; \
          mv $WHIZZY._ps $WHIZZY.ps; }
        }
    view () {
       PIDS=
       if $DUPLEX
       then
         [ -f $NAME.dview ] || cp $WHIZZY.dview $NAME.dview
         $VIEWCOMMAND $NAME.ps &
         PIDS="$!"
       fi
       $VIEWCOMMAND $WHIZZY.ps &
       PIDS="$PIDS $!"
       }
    ;;   
  dvi)
    preview () { mv $WHIZZY.dvi $WHIZZY.dview; }
    view () {
       PIDS=
       if $DUPLEX
       then
         [ -f $NAME.dview ] || cp $WHIZZY.dview $NAME.dview
         $VIEWCOMMAND $NAME.dview &
         PIDS="$!"
       fi
       $VIEWCOMMAND $WHIZZY.dview &
       PIDS="$PIDS $!"
      }
    SIG=$SIGDVI
    PSBUG=0
    ;;   
esac

newfiles () {
  mv $(find $HERE/$WHIZZY -type f -print || suicide) $HERE/  2>/dev/null
}

defaultmake () { mv $SLICE $WHIZZY.tex 2>/dev/null; }

preprocess () {
  if $MAKE $WHIZZY.tex >$LOG 2>$ERR && [ -f $WHIZZY.tex ]
  then 
     true
  else
     echo '<Preprocessing failed>'
     [ -f $ERR ] && cat $ERR
     log
     false
  fi
}

process () {
  rm -f $WHIZZY.aux
  echo -n '<Recompiling '
  if { runtex $FORMAT $WHIZZY && preview; } > $LOG
  then
     echo 'compilation succeeded>'
     ln -f $WHIZZY.tex $WHIZZY.xet
  else
     echo 'recompilation failed>'
     if [ -f $WHIZZY.xet ] && wdiff  $WHIZZY.xet $WHIZZY.tex 
     then 
        :
     else
        log
        echo 'l.'$[ $(wc -l < $WHIZZY.tex) - 1 ]' '
     fi
     echo '<Continuing>'
     false
  fi
}

# debugging information

if $DEBUG; then 
errlog "NAME=$NAME"
errlog "WHIZZY=$WHIZZY"
errlog "DOMARKS=$DOMARKS"
fi

# Initial run

# to make sure the dvi file exists 
runtex $FORMAT $WHIZZY.nil > $LOG && preview || log

# To give it a chance to see citations and other global information.

if [ -f $NAME.bbl ]; then cp $NAME.bbl $WHIZZY.bbl; fi
if [ -f $NAME.toc ]; then cp $NAME.toc $WHIZZY.toc; fi

# process $WHIZZY.tex is present. Will override $WHIZZY.dvi if it succeeds

mkdir $WHIZZY 2>/dev/null

if newfiles; then preprocess && process; fi

# lauch the previewer(s)
if view 2>$ERR
then 
   ID=$!
   echo $PIDS > $WHIZZY.id
   sleep 1
   if kill -CONT $ID
   then 
      : 
   else
      echo '<Fatal error: viewing process terminated prematurely>' 
      suicide
   fi
else 
   echo '<Fatal error: viewing process failed>'
   cat $ERR
   suicide
fi

whole () {
#     if head $WHIZZY.tex | grep '%DOMARKS'
#     then DOMARKS=true
#     else DOMARKS=false
#     fi
#  if $DOMARKS && [ ! -f $WHIZZY.pag ]
#  then 
   echo '<Recompiling whole document>'
   if batchmarks $1 </dev/null >$LOG.pag
   then
      echo '<Whole document updated>'
      if $1; then echo '<Pages and sections updated>'; fi
   else
      echo '<Whole document recompilation failed>'
   fi
#  fi
}
whole $DOMARKS

# The loop watching changes

PSDATE=0
while true
do
  REFORMATED=false
  if [ $NAME.fmt -ot $NAME.tex ]
  then
      echo '<Reformating>'
      touch -r $NAME.tex $NAME.fmt
      mv -f $NAME.fmt $WHIZZY.fmt
      if format > $LOG
      then
          echo '<Reformating succeeded>'
          REFORMATED=true
          whole $DOMARKS
#            if $DOMARKS 
#            then
#               echo '<Recomputing pages and sections>'
#               if batchmarks </dev/null >$LOG.pag
#               then
#                  echo '<Pages and sections updated>'
#               else
#                  echo '<Pages and sections are ignored>'
#               fi
#            fi
      else
          mv -f $WHIZZY.fmt $NAME.fmt
          echo '<Reformatting failed>'
          log
          echo '<Contuning with the old format>'
      fi
  fi
  if newfiles && preprocess || $REFORMATED
  then
      if process
      then 
         kill -$SIG $ID \
          || (echo '<Fatal error: could not refresh! Exiting>'; \
              suicide; exit 2)
      else
         echo '<Continuing>'
      fi
  else
      if $STOP; then kill -STOP $$; else usleep $WHIZZYPAUSE; fi
      kill -CONT $ID || (suicide; exit 2)
  fi
done

exit 0
